/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
	"fmt"
)

// ApiHealthStatus the model 'ApiHealthStatus'
type ApiHealthStatus string

// List of ApiHealthStatus
const (
	HEALTHY ApiHealthStatus = "Healthy"
	UNHEALTHY ApiHealthStatus = "Unhealthy"
	DEGRADED ApiHealthStatus = "Degraded"
)

// All allowed values of ApiHealthStatus enum
var AllowedApiHealthStatusEnumValues = []ApiHealthStatus{
	"Healthy",
	"Unhealthy",
	"Degraded",
}

func (v *ApiHealthStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiHealthStatus(value)
	for _, existing := range AllowedApiHealthStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiHealthStatus", value)
}

// NewApiHealthStatusFromValue returns a pointer to a valid ApiHealthStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiHealthStatusFromValue(v string) (*ApiHealthStatus, error) {
	ev := ApiHealthStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiHealthStatus: valid values are %v", v, AllowedApiHealthStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiHealthStatus) IsValid() bool {
	for _, existing := range AllowedApiHealthStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiHealthStatus value
func (v ApiHealthStatus) Ptr() *ApiHealthStatus {
	return &v
}

type NullableApiHealthStatus struct {
	value *ApiHealthStatus
	isSet bool
}

func (v NullableApiHealthStatus) Get() *ApiHealthStatus {
	return v.value
}

func (v *NullableApiHealthStatus) Set(val *ApiHealthStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHealthStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHealthStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHealthStatus(val *ApiHealthStatus) *NullableApiHealthStatus {
	return &NullableApiHealthStatus{value: val, isSet: true}
}

func (v NullableApiHealthStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHealthStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

