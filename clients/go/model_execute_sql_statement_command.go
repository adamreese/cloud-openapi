/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
)

// checks if the ExecuteSqlStatementCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecuteSqlStatementCommand{}

// ExecuteSqlStatementCommand struct for ExecuteSqlStatementCommand
type ExecuteSqlStatementCommand struct {
	Database string `json:"database"`
	Default bool `json:"default"`
	Statement string `json:"statement"`
}

// NewExecuteSqlStatementCommand instantiates a new ExecuteSqlStatementCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteSqlStatementCommand(database string, default_ bool, statement string) *ExecuteSqlStatementCommand {
	this := ExecuteSqlStatementCommand{}
	this.Database = database
	this.Default = default_
	this.Statement = statement
	return &this
}

// NewExecuteSqlStatementCommandWithDefaults instantiates a new ExecuteSqlStatementCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteSqlStatementCommandWithDefaults() *ExecuteSqlStatementCommand {
	this := ExecuteSqlStatementCommand{}
	return &this
}

// GetDatabase returns the Database field value
func (o *ExecuteSqlStatementCommand) GetDatabase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Database
}

// GetDatabaseOk returns a tuple with the Database field value
// and a boolean to check if the value has been set.
func (o *ExecuteSqlStatementCommand) GetDatabaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Database, true
}

// SetDatabase sets field value
func (o *ExecuteSqlStatementCommand) SetDatabase(v string) {
	o.Database = v
}

// GetDefault returns the Default field value
func (o *ExecuteSqlStatementCommand) GetDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *ExecuteSqlStatementCommand) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *ExecuteSqlStatementCommand) SetDefault(v bool) {
	o.Default = v
}

// GetStatement returns the Statement field value
func (o *ExecuteSqlStatementCommand) GetStatement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *ExecuteSqlStatementCommand) GetStatementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statement, true
}

// SetStatement sets field value
func (o *ExecuteSqlStatementCommand) SetStatement(v string) {
	o.Statement = v
}

func (o ExecuteSqlStatementCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecuteSqlStatementCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["database"] = o.Database
	toSerialize["default"] = o.Default
	toSerialize["statement"] = o.Statement
	return toSerialize, nil
}

type NullableExecuteSqlStatementCommand struct {
	value *ExecuteSqlStatementCommand
	isSet bool
}

func (v NullableExecuteSqlStatementCommand) Get() *ExecuteSqlStatementCommand {
	return v.value
}

func (v *NullableExecuteSqlStatementCommand) Set(val *ExecuteSqlStatementCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteSqlStatementCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteSqlStatementCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteSqlStatementCommand(val *ExecuteSqlStatementCommand) *NullableExecuteSqlStatementCommand {
	return &NullableExecuteSqlStatementCommand{value: val, isSet: true}
}

func (v NullableExecuteSqlStatementCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteSqlStatementCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


