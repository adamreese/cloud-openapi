/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
	"time"
)

// checks if the AccountPlanRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPlanRecord{}

// AccountPlanRecord struct for AccountPlanRecord
type AccountPlanRecord struct {
	AccountType *AccountPlanType `json:"accountType,omitempty"`
	CancelAt NullableTime `json:"cancelAt,omitempty"`
	CycleStartDate NullableTime `json:"cycleStartDate,omitempty"`
	CycleEndDate NullableTime `json:"cycleEndDate,omitempty"`
}

// NewAccountPlanRecord instantiates a new AccountPlanRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPlanRecord() *AccountPlanRecord {
	this := AccountPlanRecord{}
	return &this
}

// NewAccountPlanRecordWithDefaults instantiates a new AccountPlanRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPlanRecordWithDefaults() *AccountPlanRecord {
	this := AccountPlanRecord{}
	return &this
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *AccountPlanRecord) GetAccountType() AccountPlanType {
	if o == nil || IsNil(o.AccountType) {
		var ret AccountPlanType
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPlanRecord) GetAccountTypeOk() (*AccountPlanType, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *AccountPlanRecord) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given AccountPlanType and assigns it to the AccountType field.
func (o *AccountPlanRecord) SetAccountType(v AccountPlanType) {
	o.AccountType = &v
}

// GetCancelAt returns the CancelAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountPlanRecord) GetCancelAt() time.Time {
	if o == nil || IsNil(o.CancelAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CancelAt.Get()
}

// GetCancelAtOk returns a tuple with the CancelAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountPlanRecord) GetCancelAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelAt.Get(), o.CancelAt.IsSet()
}

// HasCancelAt returns a boolean if a field has been set.
func (o *AccountPlanRecord) HasCancelAt() bool {
	if o != nil && o.CancelAt.IsSet() {
		return true
	}

	return false
}

// SetCancelAt gets a reference to the given NullableTime and assigns it to the CancelAt field.
func (o *AccountPlanRecord) SetCancelAt(v time.Time) {
	o.CancelAt.Set(&v)
}
// SetCancelAtNil sets the value for CancelAt to be an explicit nil
func (o *AccountPlanRecord) SetCancelAtNil() {
	o.CancelAt.Set(nil)
}

// UnsetCancelAt ensures that no value is present for CancelAt, not even an explicit nil
func (o *AccountPlanRecord) UnsetCancelAt() {
	o.CancelAt.Unset()
}

// GetCycleStartDate returns the CycleStartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountPlanRecord) GetCycleStartDate() time.Time {
	if o == nil || IsNil(o.CycleStartDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CycleStartDate.Get()
}

// GetCycleStartDateOk returns a tuple with the CycleStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountPlanRecord) GetCycleStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CycleStartDate.Get(), o.CycleStartDate.IsSet()
}

// HasCycleStartDate returns a boolean if a field has been set.
func (o *AccountPlanRecord) HasCycleStartDate() bool {
	if o != nil && o.CycleStartDate.IsSet() {
		return true
	}

	return false
}

// SetCycleStartDate gets a reference to the given NullableTime and assigns it to the CycleStartDate field.
func (o *AccountPlanRecord) SetCycleStartDate(v time.Time) {
	o.CycleStartDate.Set(&v)
}
// SetCycleStartDateNil sets the value for CycleStartDate to be an explicit nil
func (o *AccountPlanRecord) SetCycleStartDateNil() {
	o.CycleStartDate.Set(nil)
}

// UnsetCycleStartDate ensures that no value is present for CycleStartDate, not even an explicit nil
func (o *AccountPlanRecord) UnsetCycleStartDate() {
	o.CycleStartDate.Unset()
}

// GetCycleEndDate returns the CycleEndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountPlanRecord) GetCycleEndDate() time.Time {
	if o == nil || IsNil(o.CycleEndDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CycleEndDate.Get()
}

// GetCycleEndDateOk returns a tuple with the CycleEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountPlanRecord) GetCycleEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CycleEndDate.Get(), o.CycleEndDate.IsSet()
}

// HasCycleEndDate returns a boolean if a field has been set.
func (o *AccountPlanRecord) HasCycleEndDate() bool {
	if o != nil && o.CycleEndDate.IsSet() {
		return true
	}

	return false
}

// SetCycleEndDate gets a reference to the given NullableTime and assigns it to the CycleEndDate field.
func (o *AccountPlanRecord) SetCycleEndDate(v time.Time) {
	o.CycleEndDate.Set(&v)
}
// SetCycleEndDateNil sets the value for CycleEndDate to be an explicit nil
func (o *AccountPlanRecord) SetCycleEndDateNil() {
	o.CycleEndDate.Set(nil)
}

// UnsetCycleEndDate ensures that no value is present for CycleEndDate, not even an explicit nil
func (o *AccountPlanRecord) UnsetCycleEndDate() {
	o.CycleEndDate.Unset()
}

func (o AccountPlanRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPlanRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	if o.CancelAt.IsSet() {
		toSerialize["cancelAt"] = o.CancelAt.Get()
	}
	if o.CycleStartDate.IsSet() {
		toSerialize["cycleStartDate"] = o.CycleStartDate.Get()
	}
	if o.CycleEndDate.IsSet() {
		toSerialize["cycleEndDate"] = o.CycleEndDate.Get()
	}
	return toSerialize, nil
}

type NullableAccountPlanRecord struct {
	value *AccountPlanRecord
	isSet bool
}

func (v NullableAccountPlanRecord) Get() *AccountPlanRecord {
	return v.value
}

func (v *NullableAccountPlanRecord) Set(val *AccountPlanRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPlanRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPlanRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPlanRecord(val *AccountPlanRecord) *NullableAccountPlanRecord {
	return &NullableAccountPlanRecord{value: val, isSet: true}
}

func (v NullableAccountPlanRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPlanRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


