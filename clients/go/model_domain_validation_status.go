/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
	"fmt"
)

// DomainValidationStatus the model 'DomainValidationStatus'
type DomainValidationStatus string

// List of DomainValidationStatus
const (
	IN_PROGRESS DomainValidationStatus = "InProgress"
	READY DomainValidationStatus = "Ready"
)

// All allowed values of DomainValidationStatus enum
var AllowedDomainValidationStatusEnumValues = []DomainValidationStatus{
	"InProgress",
	"Ready",
}

func (v *DomainValidationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainValidationStatus(value)
	for _, existing := range AllowedDomainValidationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainValidationStatus", value)
}

// NewDomainValidationStatusFromValue returns a pointer to a valid DomainValidationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainValidationStatusFromValue(v string) (*DomainValidationStatus, error) {
	ev := DomainValidationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainValidationStatus: valid values are %v", v, AllowedDomainValidationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainValidationStatus) IsValid() bool {
	for _, existing := range AllowedDomainValidationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DomainValidationStatus value
func (v DomainValidationStatus) Ptr() *DomainValidationStatus {
	return &v
}

type NullableDomainValidationStatus struct {
	value *DomainValidationStatus
	isSet bool
}

func (v NullableDomainValidationStatus) Get() *DomainValidationStatus {
	return v.value
}

func (v *NullableDomainValidationStatus) Set(val *DomainValidationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainValidationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainValidationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainValidationStatus(val *DomainValidationStatus) *NullableDomainValidationStatus {
	return &NullableDomainValidationStatus{value: val, isSet: true}
}

func (v NullableDomainValidationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainValidationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

