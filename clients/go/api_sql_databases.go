/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SqlDatabasesApiService SqlDatabasesApi service
type SqlDatabasesApiService service

type ApiApiSqlDatabasesCreatePostRequest struct {
	ctx context.Context
	ApiService *SqlDatabasesApiService
	createSqlDatabaseCommand *CreateSqlDatabaseCommand
	apiVersion *string
}

func (r ApiApiSqlDatabasesCreatePostRequest) CreateSqlDatabaseCommand(createSqlDatabaseCommand CreateSqlDatabaseCommand) ApiApiSqlDatabasesCreatePostRequest {
	r.createSqlDatabaseCommand = &createSqlDatabaseCommand
	return r
}

// The requested API version
func (r ApiApiSqlDatabasesCreatePostRequest) ApiVersion(apiVersion string) ApiApiSqlDatabasesCreatePostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiSqlDatabasesCreatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiSqlDatabasesCreatePostExecute(r)
}

/*
ApiSqlDatabasesCreatePost Method for ApiSqlDatabasesCreatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSqlDatabasesCreatePostRequest
*/
func (a *SqlDatabasesApiService) ApiSqlDatabasesCreatePost(ctx context.Context) ApiApiSqlDatabasesCreatePostRequest {
	return ApiApiSqlDatabasesCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SqlDatabasesApiService) ApiSqlDatabasesCreatePostExecute(r ApiApiSqlDatabasesCreatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SqlDatabasesApiService.ApiSqlDatabasesCreatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/sql-databases/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createSqlDatabaseCommand == nil {
		return nil, reportError("createSqlDatabaseCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.createSqlDatabaseCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiSqlDatabasesDeleteRequest struct {
	ctx context.Context
	ApiService *SqlDatabasesApiService
	deleteSqlDatabaseCommand *DeleteSqlDatabaseCommand
	apiVersion *string
}

func (r ApiApiSqlDatabasesDeleteRequest) DeleteSqlDatabaseCommand(deleteSqlDatabaseCommand DeleteSqlDatabaseCommand) ApiApiSqlDatabasesDeleteRequest {
	r.deleteSqlDatabaseCommand = &deleteSqlDatabaseCommand
	return r
}

// The requested API version
func (r ApiApiSqlDatabasesDeleteRequest) ApiVersion(apiVersion string) ApiApiSqlDatabasesDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiSqlDatabasesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiSqlDatabasesDeleteExecute(r)
}

/*
ApiSqlDatabasesDelete Method for ApiSqlDatabasesDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSqlDatabasesDeleteRequest
*/
func (a *SqlDatabasesApiService) ApiSqlDatabasesDelete(ctx context.Context) ApiApiSqlDatabasesDeleteRequest {
	return ApiApiSqlDatabasesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SqlDatabasesApiService) ApiSqlDatabasesDeleteExecute(r ApiApiSqlDatabasesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SqlDatabasesApiService.ApiSqlDatabasesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/sql-databases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteSqlDatabaseCommand == nil {
		return nil, reportError("deleteSqlDatabaseCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.deleteSqlDatabaseCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiSqlDatabasesExecutePostRequest struct {
	ctx context.Context
	ApiService *SqlDatabasesApiService
	executeSqlStatementCommand *ExecuteSqlStatementCommand
	apiVersion *string
}

func (r ApiApiSqlDatabasesExecutePostRequest) ExecuteSqlStatementCommand(executeSqlStatementCommand ExecuteSqlStatementCommand) ApiApiSqlDatabasesExecutePostRequest {
	r.executeSqlStatementCommand = &executeSqlStatementCommand
	return r
}

// The requested API version
func (r ApiApiSqlDatabasesExecutePostRequest) ApiVersion(apiVersion string) ApiApiSqlDatabasesExecutePostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiSqlDatabasesExecutePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiSqlDatabasesExecutePostExecute(r)
}

/*
ApiSqlDatabasesExecutePost Method for ApiSqlDatabasesExecutePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSqlDatabasesExecutePostRequest
*/
func (a *SqlDatabasesApiService) ApiSqlDatabasesExecutePost(ctx context.Context) ApiApiSqlDatabasesExecutePostRequest {
	return ApiApiSqlDatabasesExecutePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SqlDatabasesApiService) ApiSqlDatabasesExecutePostExecute(r ApiApiSqlDatabasesExecutePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SqlDatabasesApiService.ApiSqlDatabasesExecutePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/sql-databases/execute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.executeSqlStatementCommand == nil {
		return nil, reportError("executeSqlStatementCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.executeSqlStatementCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiSqlDatabasesGetRequest struct {
	ctx context.Context
	ApiService *SqlDatabasesApiService
	getSqlDatabasesQuery *GetSqlDatabasesQuery
	apiVersion *string
}

func (r ApiApiSqlDatabasesGetRequest) GetSqlDatabasesQuery(getSqlDatabasesQuery GetSqlDatabasesQuery) ApiApiSqlDatabasesGetRequest {
	r.getSqlDatabasesQuery = &getSqlDatabasesQuery
	return r
}

// The requested API version
func (r ApiApiSqlDatabasesGetRequest) ApiVersion(apiVersion string) ApiApiSqlDatabasesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiSqlDatabasesGetRequest) Execute() (*DatabasesList, *http.Response, error) {
	return r.ApiService.ApiSqlDatabasesGetExecute(r)
}

/*
ApiSqlDatabasesGet Method for ApiSqlDatabasesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSqlDatabasesGetRequest
*/
func (a *SqlDatabasesApiService) ApiSqlDatabasesGet(ctx context.Context) ApiApiSqlDatabasesGetRequest {
	return ApiApiSqlDatabasesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DatabasesList
func (a *SqlDatabasesApiService) ApiSqlDatabasesGetExecute(r ApiApiSqlDatabasesGetRequest) (*DatabasesList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DatabasesList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SqlDatabasesApiService.ApiSqlDatabasesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/sql-databases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getSqlDatabasesQuery == nil {
		return localVarReturnValue, nil, reportError("getSqlDatabasesQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.getSqlDatabasesQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
