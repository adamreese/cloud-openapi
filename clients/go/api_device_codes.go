/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DeviceCodesApiService DeviceCodesApi service
type DeviceCodesApiService service

type ApiApiDeviceCodesActivatePostRequest struct {
	ctx context.Context
	ApiService *DeviceCodesApiService
	activateDeviceCodeCommand *ActivateDeviceCodeCommand
	apiVersion *string
}

func (r ApiApiDeviceCodesActivatePostRequest) ActivateDeviceCodeCommand(activateDeviceCodeCommand ActivateDeviceCodeCommand) ApiApiDeviceCodesActivatePostRequest {
	r.activateDeviceCodeCommand = &activateDeviceCodeCommand
	return r
}

// The requested API version
func (r ApiApiDeviceCodesActivatePostRequest) ApiVersion(apiVersion string) ApiApiDeviceCodesActivatePostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiDeviceCodesActivatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiDeviceCodesActivatePostExecute(r)
}

/*
ApiDeviceCodesActivatePost Method for ApiDeviceCodesActivatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiDeviceCodesActivatePostRequest
*/
func (a *DeviceCodesApiService) ApiDeviceCodesActivatePost(ctx context.Context) ApiApiDeviceCodesActivatePostRequest {
	return ApiApiDeviceCodesActivatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceCodesApiService) ApiDeviceCodesActivatePostExecute(r ApiApiDeviceCodesActivatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceCodesApiService.ApiDeviceCodesActivatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/device-codes/activate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activateDeviceCodeCommand == nil {
		return nil, reportError("activateDeviceCodeCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.activateDeviceCodeCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiDeviceCodesPostRequest struct {
	ctx context.Context
	ApiService *DeviceCodesApiService
	createDeviceCodeCommand *CreateDeviceCodeCommand
	apiVersion *string
}

func (r ApiApiDeviceCodesPostRequest) CreateDeviceCodeCommand(createDeviceCodeCommand CreateDeviceCodeCommand) ApiApiDeviceCodesPostRequest {
	r.createDeviceCodeCommand = &createDeviceCodeCommand
	return r
}

// The requested API version
func (r ApiApiDeviceCodesPostRequest) ApiVersion(apiVersion string) ApiApiDeviceCodesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiDeviceCodesPostRequest) Execute() (*DeviceCodeItem, *http.Response, error) {
	return r.ApiService.ApiDeviceCodesPostExecute(r)
}

/*
ApiDeviceCodesPost Method for ApiDeviceCodesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiDeviceCodesPostRequest
*/
func (a *DeviceCodesApiService) ApiDeviceCodesPost(ctx context.Context) ApiApiDeviceCodesPostRequest {
	return ApiApiDeviceCodesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceCodeItem
func (a *DeviceCodesApiService) ApiDeviceCodesPostExecute(r ApiApiDeviceCodesPostRequest) (*DeviceCodeItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceCodeItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceCodesApiService.ApiDeviceCodesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/device-codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDeviceCodeCommand == nil {
		return localVarReturnValue, nil, reportError("createDeviceCodeCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.createDeviceCodeCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiDeviceCodesUserCodeGetRequest struct {
	ctx context.Context
	ApiService *DeviceCodesApiService
	userCode string
	apiVersion *string
}

// The requested API version
func (r ApiApiDeviceCodesUserCodeGetRequest) ApiVersion(apiVersion string) ApiApiDeviceCodesUserCodeGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiDeviceCodesUserCodeGetRequest) Execute() (*DeviceCodeDetails, *http.Response, error) {
	return r.ApiService.ApiDeviceCodesUserCodeGetExecute(r)
}

/*
ApiDeviceCodesUserCodeGet Method for ApiDeviceCodesUserCodeGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userCode
 @return ApiApiDeviceCodesUserCodeGetRequest
*/
func (a *DeviceCodesApiService) ApiDeviceCodesUserCodeGet(ctx context.Context, userCode string) ApiApiDeviceCodesUserCodeGetRequest {
	return ApiApiDeviceCodesUserCodeGetRequest{
		ApiService: a,
		ctx: ctx,
		userCode: userCode,
	}
}

// Execute executes the request
//  @return DeviceCodeDetails
func (a *DeviceCodesApiService) ApiDeviceCodesUserCodeGetExecute(r ApiApiDeviceCodesUserCodeGetRequest) (*DeviceCodeDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceCodeDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceCodesApiService.ApiDeviceCodesUserCodeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/device-codes/{userCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"userCode"+"}", url.PathEscape(parameterValueToString(r.userCode, "userCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
