/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
	"fmt"
)

// AccountProvider the model 'AccountProvider'
type AccountProvider string

// List of AccountProvider
const (
	GIT_HUB AccountProvider = "GitHub"
	DEVICE_FLOW AccountProvider = "DeviceFlow"
)

// All allowed values of AccountProvider enum
var AllowedAccountProviderEnumValues = []AccountProvider{
	"GitHub",
	"DeviceFlow",
}

func (v *AccountProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountProvider(value)
	for _, existing := range AllowedAccountProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountProvider", value)
}

// NewAccountProviderFromValue returns a pointer to a valid AccountProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountProviderFromValue(v string) (*AccountProvider, error) {
	ev := AccountProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountProvider: valid values are %v", v, AllowedAccountProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountProvider) IsValid() bool {
	for _, existing := range AllowedAccountProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountProvider value
func (v AccountProvider) Ptr() *AccountProvider {
	return &v
}

type NullableAccountProvider struct {
	value *AccountProvider
	isSet bool
}

func (v NullableAccountProvider) Get() *AccountProvider {
	return v.value
}

func (v *NullableAccountProvider) Set(val *AccountProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountProvider(val *AccountProvider) *NullableAccountProvider {
	return &NullableAccountProvider{value: val, isSet: true}
}

func (v NullableAccountProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

