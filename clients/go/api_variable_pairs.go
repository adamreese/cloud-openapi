/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// VariablePairsApiService VariablePairsApi service
type VariablePairsApiService service

type ApiApiVariablePairsDeleteRequest struct {
	ctx context.Context
	ApiService *VariablePairsApiService
	deleteVariablePairCommand *DeleteVariablePairCommand
	apiVersion *string
}

func (r ApiApiVariablePairsDeleteRequest) DeleteVariablePairCommand(deleteVariablePairCommand DeleteVariablePairCommand) ApiApiVariablePairsDeleteRequest {
	r.deleteVariablePairCommand = &deleteVariablePairCommand
	return r
}

// The requested API version
func (r ApiApiVariablePairsDeleteRequest) ApiVersion(apiVersion string) ApiApiVariablePairsDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiVariablePairsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiVariablePairsDeleteExecute(r)
}

/*
ApiVariablePairsDelete Method for ApiVariablePairsDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiVariablePairsDeleteRequest
*/
func (a *VariablePairsApiService) ApiVariablePairsDelete(ctx context.Context) ApiApiVariablePairsDeleteRequest {
	return ApiApiVariablePairsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VariablePairsApiService) ApiVariablePairsDeleteExecute(r ApiApiVariablePairsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablePairsApiService.ApiVariablePairsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/variable-pairs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteVariablePairCommand == nil {
		return nil, reportError("deleteVariablePairCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.deleteVariablePairCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiVariablePairsGetRequest struct {
	ctx context.Context
	ApiService *VariablePairsApiService
	getVariablesQuery *GetVariablesQuery
	apiVersion *string
}

func (r ApiApiVariablePairsGetRequest) GetVariablesQuery(getVariablesQuery GetVariablesQuery) ApiApiVariablePairsGetRequest {
	r.getVariablesQuery = &getVariablesQuery
	return r
}

// The requested API version
func (r ApiApiVariablePairsGetRequest) ApiVersion(apiVersion string) ApiApiVariablePairsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiVariablePairsGetRequest) Execute() (*VariablesList, *http.Response, error) {
	return r.ApiService.ApiVariablePairsGetExecute(r)
}

/*
ApiVariablePairsGet Method for ApiVariablePairsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiVariablePairsGetRequest
*/
func (a *VariablePairsApiService) ApiVariablePairsGet(ctx context.Context) ApiApiVariablePairsGetRequest {
	return ApiApiVariablePairsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VariablesList
func (a *VariablePairsApiService) ApiVariablePairsGetExecute(r ApiApiVariablePairsGetRequest) (*VariablesList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VariablesList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablePairsApiService.ApiVariablePairsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/variable-pairs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getVariablesQuery == nil {
		return localVarReturnValue, nil, reportError("getVariablesQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.getVariablesQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiVariablePairsPostRequest struct {
	ctx context.Context
	ApiService *VariablePairsApiService
	createVariablePairCommand *CreateVariablePairCommand
	apiVersion *string
}

func (r ApiApiVariablePairsPostRequest) CreateVariablePairCommand(createVariablePairCommand CreateVariablePairCommand) ApiApiVariablePairsPostRequest {
	r.createVariablePairCommand = &createVariablePairCommand
	return r
}

// The requested API version
func (r ApiApiVariablePairsPostRequest) ApiVersion(apiVersion string) ApiApiVariablePairsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiVariablePairsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiVariablePairsPostExecute(r)
}

/*
ApiVariablePairsPost Method for ApiVariablePairsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiVariablePairsPostRequest
*/
func (a *VariablePairsApiService) ApiVariablePairsPost(ctx context.Context) ApiApiVariablePairsPostRequest {
	return ApiApiVariablePairsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VariablePairsApiService) ApiVariablePairsPostExecute(r ApiApiVariablePairsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariablePairsApiService.ApiVariablePairsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/variable-pairs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createVariablePairCommand == nil {
		return nil, reportError("createVariablePairCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.createVariablePairCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
