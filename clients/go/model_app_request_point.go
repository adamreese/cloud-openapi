/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
)

// checks if the AppRequestPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppRequestPoint{}

// AppRequestPoint struct for AppRequestPoint
type AppRequestPoint struct {
	Timestamp *int64 `json:"timestamp,omitempty"`
	Value *int64 `json:"value,omitempty"`
}

// NewAppRequestPoint instantiates a new AppRequestPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRequestPoint() *AppRequestPoint {
	this := AppRequestPoint{}
	return &this
}

// NewAppRequestPointWithDefaults instantiates a new AppRequestPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRequestPointWithDefaults() *AppRequestPoint {
	this := AppRequestPoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *AppRequestPoint) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRequestPoint) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *AppRequestPoint) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *AppRequestPoint) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AppRequestPoint) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRequestPoint) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AppRequestPoint) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *AppRequestPoint) SetValue(v int64) {
	o.Value = &v
}

func (o AppRequestPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppRequestPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableAppRequestPoint struct {
	value *AppRequestPoint
	isSet bool
}

func (v NullableAppRequestPoint) Get() *AppRequestPoint {
	return v.value
}

func (v *NullableAppRequestPoint) Set(val *AppRequestPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRequestPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRequestPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRequestPoint(val *AppRequestPoint) *NullableAppRequestPoint {
	return &NullableAppRequestPoint{value: val, isSet: true}
}

func (v NullableAppRequestPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRequestPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


