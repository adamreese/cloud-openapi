/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PersonalAccessTokensApiService PersonalAccessTokensApi service
type PersonalAccessTokensApiService service

type ApiApiPersonalAccessTokensGetRequest struct {
	ctx context.Context
	ApiService *PersonalAccessTokensApiService
	searchText *string
	pageIndex *int32
	pageSize *int32
	sortBy *string
	isSortedAscending *bool
	apiVersion *string
}

func (r ApiApiPersonalAccessTokensGetRequest) SearchText(searchText string) ApiApiPersonalAccessTokensGetRequest {
	r.searchText = &searchText
	return r
}

func (r ApiApiPersonalAccessTokensGetRequest) PageIndex(pageIndex int32) ApiApiPersonalAccessTokensGetRequest {
	r.pageIndex = &pageIndex
	return r
}

func (r ApiApiPersonalAccessTokensGetRequest) PageSize(pageSize int32) ApiApiPersonalAccessTokensGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiApiPersonalAccessTokensGetRequest) SortBy(sortBy string) ApiApiPersonalAccessTokensGetRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiApiPersonalAccessTokensGetRequest) IsSortedAscending(isSortedAscending bool) ApiApiPersonalAccessTokensGetRequest {
	r.isSortedAscending = &isSortedAscending
	return r
}

// The requested API version
func (r ApiApiPersonalAccessTokensGetRequest) ApiVersion(apiVersion string) ApiApiPersonalAccessTokensGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiPersonalAccessTokensGetRequest) Execute() (*PersonalAccessTokenItemPage, *http.Response, error) {
	return r.ApiService.ApiPersonalAccessTokensGetExecute(r)
}

/*
ApiPersonalAccessTokensGet Method for ApiPersonalAccessTokensGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiPersonalAccessTokensGetRequest
*/
func (a *PersonalAccessTokensApiService) ApiPersonalAccessTokensGet(ctx context.Context) ApiApiPersonalAccessTokensGetRequest {
	return ApiApiPersonalAccessTokensGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PersonalAccessTokenItemPage
func (a *PersonalAccessTokensApiService) ApiPersonalAccessTokensGetExecute(r ApiApiPersonalAccessTokensGetRequest) (*PersonalAccessTokenItemPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessTokenItemPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokensApiService.ApiPersonalAccessTokensGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/personal-access-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchText", r.searchText, "")
	}
	if r.pageIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageIndex", r.pageIndex, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.isSortedAscending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isSortedAscending", r.isSortedAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiPersonalAccessTokensIdDeleteRequest struct {
	ctx context.Context
	ApiService *PersonalAccessTokensApiService
	id string
	apiVersion *string
}

// The requested API version
func (r ApiApiPersonalAccessTokensIdDeleteRequest) ApiVersion(apiVersion string) ApiApiPersonalAccessTokensIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiPersonalAccessTokensIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiPersonalAccessTokensIdDeleteExecute(r)
}

/*
ApiPersonalAccessTokensIdDelete Method for ApiPersonalAccessTokensIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiPersonalAccessTokensIdDeleteRequest
*/
func (a *PersonalAccessTokensApiService) ApiPersonalAccessTokensIdDelete(ctx context.Context, id string) ApiApiPersonalAccessTokensIdDeleteRequest {
	return ApiApiPersonalAccessTokensIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PersonalAccessTokensApiService) ApiPersonalAccessTokensIdDeleteExecute(r ApiApiPersonalAccessTokensIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokensApiService.ApiPersonalAccessTokensIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/personal-access-tokens/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiPersonalAccessTokensPostRequest struct {
	ctx context.Context
	ApiService *PersonalAccessTokensApiService
	createPersonalAccessTokenCommand *CreatePersonalAccessTokenCommand
	apiVersion *string
}

func (r ApiApiPersonalAccessTokensPostRequest) CreatePersonalAccessTokenCommand(createPersonalAccessTokenCommand CreatePersonalAccessTokenCommand) ApiApiPersonalAccessTokensPostRequest {
	r.createPersonalAccessTokenCommand = &createPersonalAccessTokenCommand
	return r
}

// The requested API version
func (r ApiApiPersonalAccessTokensPostRequest) ApiVersion(apiVersion string) ApiApiPersonalAccessTokensPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiPersonalAccessTokensPostRequest) Execute() (*PersonalAccessTokenValue, *http.Response, error) {
	return r.ApiService.ApiPersonalAccessTokensPostExecute(r)
}

/*
ApiPersonalAccessTokensPost Method for ApiPersonalAccessTokensPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiPersonalAccessTokensPostRequest
*/
func (a *PersonalAccessTokensApiService) ApiPersonalAccessTokensPost(ctx context.Context) ApiApiPersonalAccessTokensPostRequest {
	return ApiApiPersonalAccessTokensPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PersonalAccessTokenValue
func (a *PersonalAccessTokensApiService) ApiPersonalAccessTokensPostExecute(r ApiApiPersonalAccessTokensPostRequest) (*PersonalAccessTokenValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessTokenValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokensApiService.ApiPersonalAccessTokensPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/personal-access-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPersonalAccessTokenCommand == nil {
		return localVarReturnValue, nil, reportError("createPersonalAccessTokenCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	// body params
	localVarPostBody = r.createPersonalAccessTokenCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
