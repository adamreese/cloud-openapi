/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OciApiService OciApi service
type OciApiService service

type ApiApiOciGetRequest struct {
	ctx context.Context
	ApiService *OciApiService
	apiVersion *string
}

// The requested API version
func (r ApiApiOciGetRequest) ApiVersion(apiVersion string) ApiApiOciGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciGetExecute(r)
}

/*
ApiOciGet Method for ApiOciGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiOciGetRequest
*/
func (a *OciApiService) ApiOciGet(ctx context.Context) ApiApiOciGetRequest {
	return ApiApiOciGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciGetExecute(r ApiApiOciGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameBlobsUploadsDigestDeleteRequest struct {
	ctx context.Context
	ApiService *OciApiService
	digest string
	name string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameBlobsUploadsDigestDeleteRequest) ApiVersion(apiVersion string) ApiApiOciNameBlobsUploadsDigestDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameBlobsUploadsDigestDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameBlobsUploadsDigestDeleteExecute(r)
}

/*
ApiOciNameBlobsUploadsDigestDelete Method for ApiOciNameBlobsUploadsDigestDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param digest
 @param name
 @return ApiApiOciNameBlobsUploadsDigestDeleteRequest
*/
func (a *OciApiService) ApiOciNameBlobsUploadsDigestDelete(ctx context.Context, digest string, name string) ApiApiOciNameBlobsUploadsDigestDeleteRequest {
	return ApiApiOciNameBlobsUploadsDigestDeleteRequest{
		ApiService: a,
		ctx: ctx,
		digest: digest,
		name: name,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameBlobsUploadsDigestDeleteExecute(r ApiApiOciNameBlobsUploadsDigestDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameBlobsUploadsDigestDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/blobs/uploads/{digest}"
	localVarPath = strings.Replace(localVarPath, "{"+"digest"+"}", url.PathEscape(parameterValueToString(r.digest, "digest")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameBlobsUploadsDigestGetRequest struct {
	ctx context.Context
	ApiService *OciApiService
	digest string
	name string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameBlobsUploadsDigestGetRequest) ApiVersion(apiVersion string) ApiApiOciNameBlobsUploadsDigestGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameBlobsUploadsDigestGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameBlobsUploadsDigestGetExecute(r)
}

/*
ApiOciNameBlobsUploadsDigestGet Method for ApiOciNameBlobsUploadsDigestGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param digest
 @param name
 @return ApiApiOciNameBlobsUploadsDigestGetRequest
*/
func (a *OciApiService) ApiOciNameBlobsUploadsDigestGet(ctx context.Context, digest string, name string) ApiApiOciNameBlobsUploadsDigestGetRequest {
	return ApiApiOciNameBlobsUploadsDigestGetRequest{
		ApiService: a,
		ctx: ctx,
		digest: digest,
		name: name,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameBlobsUploadsDigestGetExecute(r ApiApiOciNameBlobsUploadsDigestGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameBlobsUploadsDigestGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/blobs/uploads/{digest}"
	localVarPath = strings.Replace(localVarPath, "{"+"digest"+"}", url.PathEscape(parameterValueToString(r.digest, "digest")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameBlobsUploadsDigestPatchRequest struct {
	ctx context.Context
	ApiService *OciApiService
	digest string
	name string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameBlobsUploadsDigestPatchRequest) ApiVersion(apiVersion string) ApiApiOciNameBlobsUploadsDigestPatchRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameBlobsUploadsDigestPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameBlobsUploadsDigestPatchExecute(r)
}

/*
ApiOciNameBlobsUploadsDigestPatch Method for ApiOciNameBlobsUploadsDigestPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param digest
 @param name
 @return ApiApiOciNameBlobsUploadsDigestPatchRequest
*/
func (a *OciApiService) ApiOciNameBlobsUploadsDigestPatch(ctx context.Context, digest string, name string) ApiApiOciNameBlobsUploadsDigestPatchRequest {
	return ApiApiOciNameBlobsUploadsDigestPatchRequest{
		ApiService: a,
		ctx: ctx,
		digest: digest,
		name: name,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameBlobsUploadsDigestPatchExecute(r ApiApiOciNameBlobsUploadsDigestPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameBlobsUploadsDigestPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/blobs/uploads/{digest}"
	localVarPath = strings.Replace(localVarPath, "{"+"digest"+"}", url.PathEscape(parameterValueToString(r.digest, "digest")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameBlobsUploadsDigestPutRequest struct {
	ctx context.Context
	ApiService *OciApiService
	digest string
	name string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameBlobsUploadsDigestPutRequest) ApiVersion(apiVersion string) ApiApiOciNameBlobsUploadsDigestPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameBlobsUploadsDigestPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameBlobsUploadsDigestPutExecute(r)
}

/*
ApiOciNameBlobsUploadsDigestPut Method for ApiOciNameBlobsUploadsDigestPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param digest
 @param name
 @return ApiApiOciNameBlobsUploadsDigestPutRequest
*/
func (a *OciApiService) ApiOciNameBlobsUploadsDigestPut(ctx context.Context, digest string, name string) ApiApiOciNameBlobsUploadsDigestPutRequest {
	return ApiApiOciNameBlobsUploadsDigestPutRequest{
		ApiService: a,
		ctx: ctx,
		digest: digest,
		name: name,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameBlobsUploadsDigestPutExecute(r ApiApiOciNameBlobsUploadsDigestPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameBlobsUploadsDigestPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/blobs/uploads/{digest}"
	localVarPath = strings.Replace(localVarPath, "{"+"digest"+"}", url.PathEscape(parameterValueToString(r.digest, "digest")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameBlobsUploadsPostRequest struct {
	ctx context.Context
	ApiService *OciApiService
	name string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameBlobsUploadsPostRequest) ApiVersion(apiVersion string) ApiApiOciNameBlobsUploadsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameBlobsUploadsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameBlobsUploadsPostExecute(r)
}

/*
ApiOciNameBlobsUploadsPost Method for ApiOciNameBlobsUploadsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiApiOciNameBlobsUploadsPostRequest
*/
func (a *OciApiService) ApiOciNameBlobsUploadsPost(ctx context.Context, name string) ApiApiOciNameBlobsUploadsPostRequest {
	return ApiApiOciNameBlobsUploadsPostRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameBlobsUploadsPostExecute(r ApiApiOciNameBlobsUploadsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameBlobsUploadsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/blobs/uploads"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameManifestsReferenceHeadRequest struct {
	ctx context.Context
	ApiService *OciApiService
	name string
	reference string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameManifestsReferenceHeadRequest) ApiVersion(apiVersion string) ApiApiOciNameManifestsReferenceHeadRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameManifestsReferenceHeadRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameManifestsReferenceHeadExecute(r)
}

/*
ApiOciNameManifestsReferenceHead Method for ApiOciNameManifestsReferenceHead

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @param reference
 @return ApiApiOciNameManifestsReferenceHeadRequest
*/
func (a *OciApiService) ApiOciNameManifestsReferenceHead(ctx context.Context, name string, reference string) ApiApiOciNameManifestsReferenceHeadRequest {
	return ApiApiOciNameManifestsReferenceHeadRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		reference: reference,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameManifestsReferenceHeadExecute(r ApiApiOciNameManifestsReferenceHeadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameManifestsReferenceHead")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/manifests/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(parameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOciNameManifestsReferencePutRequest struct {
	ctx context.Context
	ApiService *OciApiService
	name string
	reference string
	apiVersion *string
}

// The requested API version
func (r ApiApiOciNameManifestsReferencePutRequest) ApiVersion(apiVersion string) ApiApiOciNameManifestsReferencePutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiOciNameManifestsReferencePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOciNameManifestsReferencePutExecute(r)
}

/*
ApiOciNameManifestsReferencePut Method for ApiOciNameManifestsReferencePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @param reference
 @return ApiApiOciNameManifestsReferencePutRequest
*/
func (a *OciApiService) ApiOciNameManifestsReferencePut(ctx context.Context, name string, reference string) ApiApiOciNameManifestsReferencePutRequest {
	return ApiApiOciNameManifestsReferencePutRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		reference: reference,
	}
}

// Execute executes the request
func (a *OciApiService) ApiOciNameManifestsReferencePutExecute(r ApiApiOciNameManifestsReferencePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OciApiService.ApiOciNameManifestsReferencePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/oci/{name}/manifests/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(parameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Api-Version", r.apiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
