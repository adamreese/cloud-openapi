/*
Fermyon Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_openapi

import (
	"encoding/json"
	"fmt"
)

// TicketCategory the model 'TicketCategory'
type TicketCategory string

// List of TicketCategory
const (
	TECHNICAL_HELP TicketCategory = "TechnicalHelp"
	BILLING_HELP TicketCategory = "BillingHelp"
	SOMETHING_ELSE TicketCategory = "SomethingElse"
)

// All allowed values of TicketCategory enum
var AllowedTicketCategoryEnumValues = []TicketCategory{
	"TechnicalHelp",
	"BillingHelp",
	"SomethingElse",
}

func (v *TicketCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TicketCategory(value)
	for _, existing := range AllowedTicketCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TicketCategory", value)
}

// NewTicketCategoryFromValue returns a pointer to a valid TicketCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTicketCategoryFromValue(v string) (*TicketCategory, error) {
	ev := TicketCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TicketCategory: valid values are %v", v, AllowedTicketCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TicketCategory) IsValid() bool {
	for _, existing := range AllowedTicketCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TicketCategory value
func (v TicketCategory) Ptr() *TicketCategory {
	return &v
}

type NullableTicketCategory struct {
	value *TicketCategory
	isSet bool
}

func (v NullableTicketCategory) Get() *TicketCategory {
	return v.value
}

func (v *NullableTicketCategory) Set(val *TicketCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketCategory(val *TicketCategory) *NullableTicketCategory {
	return &NullableTicketCategory{value: val, isSet: true}
}

func (v NullableTicketCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

